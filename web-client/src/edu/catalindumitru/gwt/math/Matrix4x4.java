package edu.catalindumitru.gwt.math;

/**
 * Created by IntelliJ IDEA.
 * User: colin
 * Date: 7/4/11
 * Time: 9:58 AM
 * <p/>
 * Specialized class for 3d graohics, which has extra methods from a normal Matrix class
 */
public class Matrix4x4 extends Matrix {
    protected float determinant;

    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    public Matrix4x4() {
        super(4);
    }

    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    public Matrix4x4(float data[][]) {
        super(4);

        this.set(data);
    }

    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    public Matrix4x4(Matrix4x4 other) {
        super(other);
    }

    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------

    /**
     * Produces the determinant of the matrix. The result is calculated for every call of this method.
     * @return the determinant
     */
    public float determinant() {
        return elem[0][3] * elem[1][2] * elem[2][1] * elem[3][0] - elem[0][2] * elem[1][3] * elem[2][1] * elem[3][0] -
                elem[0][3] * elem[1][1] * elem[2][2] * elem[3][0] + elem[0][1] * elem[1][3] * elem[2][2] * elem[3][0] +
                elem[0][2] * elem[1][1] * elem[2][3] * elem[3][0] - elem[0][1] * elem[1][2] * elem[2][3] * elem[3][0] -
                elem[0][3] * elem[1][2] * elem[2][0] * elem[3][1] + elem[0][2] * elem[1][3] * elem[2][0] * elem[3][1] +
                elem[0][3] * elem[1][0] * elem[2][2] * elem[3][1] - elem[0][0] * elem[1][3] * elem[2][2] * elem[3][1] -
                elem[0][2] * elem[1][0] * elem[2][3] * elem[3][1] + elem[0][0] * elem[1][2] * elem[2][3] * elem[3][1] +
                elem[0][3] * elem[1][1] * elem[2][0] * elem[3][2] - elem[0][1] * elem[1][3] * elem[2][0] * elem[3][2] -
                elem[0][3] * elem[1][0] * elem[2][1] * elem[3][2] + elem[0][0] * elem[1][3] * elem[2][1] * elem[3][2] +
                elem[0][1] * elem[1][0] * elem[2][3] * elem[3][2] - elem[0][0] * elem[1][1] * elem[2][3] * elem[3][2] -
                elem[0][2] * elem[1][1] * elem[2][0] * elem[3][3] + elem[0][1] * elem[1][2] * elem[2][0] * elem[3][3] +
                elem[0][2] * elem[1][0] * elem[2][1] * elem[3][3] - elem[0][0] * elem[1][2] * elem[2][1] * elem[3][3] -
                elem[0][1] * elem[1][0] * elem[2][2] * elem[3][3] + elem[0][0] * elem[1][1] * elem[2][2] * elem[3][3];
    }

    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------

    /**
     * Produces the inverse of the matrix. The result is not stored in the matrix, but a new one is returned.
     * @return a new matrix representing the inverse if this matrix.
     */
    public Matrix4x4 inverse() {

        /*I know it's but ugly to read, but it's faster this way*/
       return new Matrix4x4(new float[][]{
                new float[]{
                //------------------------------------------------------------------------------------------------------
                elem[1][1] * elem[2][2] * elem[3][3] + elem[1][2] * elem[2][3]
                * elem[3][1] + elem[1][3] * elem[2][1] * elem[3][2]
                - elem[1][1] * elem[2][3] * elem[3][2] - elem[1][2]
                * elem[2][1] * elem[3][3] - elem[1][3] * elem[2][2]
                * elem[3][1],
                //------------------------------------------------------------------------------------------------------
                elem[0][1] * elem[2][3] * elem[3][2] + elem[0][2] * elem[2][1]
                * elem[3][3] + elem[0][3] * elem[2][2] * elem[3][1]
                - elem[0][1] * elem[2][2] * elem[3][3] - elem[0][2]
                * elem[2][3] * elem[3][1] - elem[0][3] * elem[2][1]
                * elem[3][2],
                //------------------------------------------------------------------------------------------------------
                 elem[0][1] * elem[1][2] * elem[3][3] + elem[0][2] * elem[1][3]
                * elem[3][1] + elem[0][3] * elem[1][1] * elem[3][2]
                - elem[0][1] * elem[1][3] * elem[3][2] - elem[0][2]
                * elem[1][1] * elem[3][3] - elem[0][3] * elem[1][2]
                * elem[3][1],
                //------------------------------------------------------------------------------------------------------
                elem[0][1] * elem[1][3] * elem[2][2] + elem[0][2] * elem[1][1]
                * elem[2][3] + elem[0][3] * elem[1][2] * elem[2][1]
                - elem[0][1] * elem[1][2] * elem[2][3] - elem[0][2]
                * elem[1][3] * elem[2][1] - elem[0][3] * elem[1][1]
                * elem[2][2]},
                //------------------------------------------------------------------------------------------------------
                 new float[]{
                 elem[1][0] * elem[2][3] * elem[3][2] + elem[1][2] * elem[2][0]
                * elem[3][3] + elem[1][3] * elem[2][2] * elem[3][0]
                - elem[1][0] * elem[2][2] * elem[3][3] - elem[1][2]
                * elem[2][3] * elem[3][0] - elem[1][3] * elem[2][0]
                * elem[3][2],
                 //------------------------------------------------------------------------------------------------------,
                  elem[0][0] * elem[2][2] * elem[3][3] + elem[0][2] * elem[2][3]
                * elem[3][0] + elem[0][3] * elem[2][0] * elem[3][2]
                - elem[0][0] * elem[2][3] * elem[3][2] - elem[0][2]
                * elem[2][0] * elem[3][3] - elem[0][3] * elem[2][2]
                * elem[3][0],
                 //------------------------------------------------------------------------------------------------------
                 elem[0][0] * elem[1][3] * elem[3][2] + elem[0][2] * elem[1][0]
                * elem[3][3] + elem[0][3] * elem[1][2] * elem[3][0]
                - elem[0][0] * elem[1][2] * elem[3][3] - elem[0][2]
                * elem[1][3] * elem[3][0] - elem[0][3] * elem[1][0]
                * elem[3][2],
                 //------------------------------------------------------------------------------------------------------
                  elem[0][0] * elem[1][2] * elem[2][3] + elem[0][2] * elem[1][3]
                * elem[2][0] + elem[0][3] * elem[1][0] * elem[2][2]
                - elem[0][0] * elem[1][3] * elem[2][2] - elem[0][2]
                * elem[1][0] * elem[2][3] - elem[0][3] * elem[1][2]
                * elem[2][0]},
                //------------------------------------------------------------------------------------------------------
                new float[]{
                elem[1][0] * elem[2][1] * elem[3][3] + elem[1][1] * elem[2][3]
                * elem[3][0] + elem[1][3] * elem[2][0] * elem[3][1]
                - elem[1][0] * elem[2][3] * elem[3][1] - elem[1][1]
                * elem[2][0] * elem[3][3] - elem[1][3] * elem[2][1]
                * elem[3][0],
                //------------------------------------------------------------------------------------------------------
                elem[0][0] * elem[2][3] * elem[3][1] + elem[0][1] * elem[2][0]
                * elem[3][3] + elem[0][3] * elem[2][1] * elem[3][0]
                - elem[0][0] * elem[2][1] * elem[3][3] - elem[0][1]
                * elem[2][3] * elem[3][0] - elem[0][3] * elem[2][0]
                * elem[3][1],
                //------------------------------------------------------------------------------------------------------
                elem[0][0] * elem[1][1] * elem[3][3] + elem[0][1] * elem[1][3]
                * elem[3][0] + elem[0][3] * elem[1][0] * elem[3][1]
                - elem[0][0] * elem[1][3] * elem[3][1] - elem[0][1]
                * elem[1][0] * elem[3][3] - elem[0][3] * elem[1][1]
                * elem[3][0],
                //------------------------------------------------------------------------------------------------------
                elem[0][0] * elem[1][3] * elem[2][1] + elem[0][1] * elem[1][0]
                * elem[2][3] + elem[0][3] * elem[1][1] * elem[2][0]
                - elem[0][0] * elem[1][1] * elem[2][3] - elem[0][1]
                * elem[1][3] * elem[2][0] - elem[0][3] * elem[1][0]
                * elem[2][1]},
                //------------------------------------------------------------------------------------------------------
                new float[]{
                elem[1][0] * elem[2][2] * elem[3][1] + elem[1][1] * elem[2][0]
                * elem[3][2] + elem[1][2] * elem[2][1] * elem[3][0]
                - elem[1][0] * elem[2][1] * elem[3][2] - elem[1][1]
                * elem[2][2] * elem[3][0] - elem[1][2] * elem[2][0]
                * elem[3][1],
                //------------------------------------------------------------------------------------------------------
                elem[0][0] * elem[2][1] * elem[3][2] + elem[0][1] * elem[2][2]
                * elem[3][0] + elem[0][2] * elem[2][0] * elem[3][1]
                - elem[0][0] * elem[2][2] * elem[3][1] - elem[0][1]
                * elem[2][0] * elem[3][2] - elem[0][2] * elem[2][1]
                * elem[3][0],
                //------------------------------------------------------------------------------------------------------
                 elem[0][0] * elem[1][2] * elem[3][1] + elem[0][1] * elem[1][0]
                * elem[3][2] + elem[0][2] * elem[1][1] * elem[3][0]
                - elem[0][0] * elem[1][1] * elem[3][2] - elem[0][1]
                * elem[1][2] * elem[3][0] - elem[0][2] * elem[1][0]
                * elem[3][1],
                //------------------------------------------------------------------------------------------------------
                elem[0][0] * elem[1][1] * elem[2][2] + elem[0][1] * elem[1][2]
                * elem[2][0] + elem[0][2] * elem[1][0] * elem[2][1]
                - elem[0][0] * elem[1][2] * elem[2][1] - elem[0][1]
                * elem[1][0] * elem[2][2] - elem[0][2] * elem[1][1]
                * elem[2][0]}});

    }
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------

}
